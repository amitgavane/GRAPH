#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Graph using Adjacency Matrix
class GraphMatrix {
private:
    vector<vector<int>> adjMatrix;
    int numVertices;

public:
    GraphMatrix(int vertices) : numVertices(vertices) {
        adjMatrix.resize(vertices, vector<int>(vertices, 0));
    }

    void addEdge(int src, int dest) {
        if (src >= 0 && src < numVertices && dest >= 0 && dest < numVertices) {
            adjMatrix[src][dest] = 1;
            adjMatrix[dest][src] = 1; // For undirected graph
        } else {
            cout << "Invalid edge! Source or destination out of bounds.\n";
        }
    }

    void display() {
        cout << "Adjacency Matrix:\n";
        for (const auto& row : adjMatrix) {
            for (int val : row) {
                cout << val << " ";
            }
            cout << "\n";
        }
    }

    void BFS(int start) {
        if (start < 0 || start >= numVertices) {
            cout << "Invalid starting vertex for BFS!\n";
            return;
        }

        vector<bool> visited(numVertices, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "BFS Traversal: ";
        while (!q.empty()) {
            int vertex = q.front();
            q.pop();
            cout << vertex << " ";

            for (int i = 0; i < numVertices; i++) {
                if (adjMatrix[vertex][i] && !visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        cout << "\n";
    }

    void DFSUtil(int vertex, vector<bool>& visited) {
        visited[vertex] = true;
        cout << vertex << " ";

        for (int i = 0; i < numVertices; i++) {
            if (adjMatrix[vertex][i] && !visited[i]) {
                DFSUtil(i, visited);
            }
        }
    }

    void DFS(int start) {
        if (start < 0 || start >= numVertices) {
            cout << "Invalid starting vertex for DFS!\n";
            return;
        }

        vector<bool> visited(numVertices, false);
        cout << "DFS Traversal: ";
        DFSUtil(start, visited);
        cout << "\n";
    }
};

// Graph using Adjacency List
class GraphList {
private:
    vector<vector<int>> adjList;
    int numVertices;

public:
    GraphList(int vertices) : numVertices(vertices) {
        adjList.resize(vertices);
    }

    void addEdge(int src, int dest) {
        if (src >= 0 && src < numVertices && dest >= 0 && dest < numVertices) {
            adjList[src].push_back(dest);
            adjList[dest].push_back(src); // For undirected graph
        } else {
            cout << "Invalid edge! Source or destination out of bounds.\n";
        }
    }

    void display() {
        cout << "Adjacency List:\n";
        for (int i = 0; i < numVertices; i++) {
            cout << i << ": ";
            for (int neighbor : adjList[i]) {
                cout << neighbor << " ";
            }
            cout << "\n";
        }
    }

    void BFS(int start) {
        if (start < 0 || start >= numVertices) {
            cout << "Invalid starting vertex for BFS!\n";
            return;
        }

        vector<bool> visited(numVertices, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "BFS Traversal: ";
        while (!q.empty()) {
            int vertex = q.front();
            q.pop();
            cout << vertex << " ";

            for (int neighbor : adjList[vertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << "\n";
    }

    void DFSUtil(int vertex, vector<bool>& visited) {
        visited[vertex] = true;
        cout << vertex << " ";

        for (int neighbor : adjList[vertex]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

    void DFS(int start) {
        if (start < 0 || start >= numVertices) {
            cout << "Invalid starting vertex for DFS!\n";
            return;
        }

        vector<bool> visited(numVertices, false);
        cout << "DFS Traversal: ";
        DFSUtil(start, visited);
        cout << "\n";
    }
};

// Main Menu
int main() {
    int choice, vertices, edges, src, dest, start;

    cout << "Choose Graph Representation:\n";
    cout << "1. Adjacency Matrix\n";
    cout << "2. Adjacency List\n";
    cout << "Enter your choice: ";
    cin >> choice;

    cout << "Enter the number of vertices: ";
    cin >> vertices;

    if (choice == 1) {
        GraphMatrix graph(vertices);

        cout << "Enter the number of edges: ";
        cin >> edges;

        for (int i = 0; i < edges; i++) {
            cout << "Enter edge (source destination): ";
            cin >> src >> dest;
            graph.addEdge(src, dest);
        }

        graph.display();

        cout << "Enter the starting vertex for BFS and DFS: ";
        cin >> start;

        graph.BFS(start);
        graph.DFS(start);
    } else if (choice == 2) {
        GraphList graph(vertices);

        cout << "Enter the number of edges: ";
        cin >> edges;

        for (int i = 0; i < edges; i++) {
            cout << "Enter edge (source destination): ";
            cin >> src >> dest;
            graph.addEdge(src, dest);
        }

        graph.display();

        cout << "Enter the starting vertex for BFS and DFS: ";
        cin >> start;

        graph.BFS(start);
        graph.DFS(start);
    } else {
        cout << "Invalid choice. Exiting program.\n";
    }

    return 0;
}
